package gpsExtractor.tools.kml;

import gpsExtractor.storage.PreferencesHolder;
import gpsExtractor.storage.TrackStorage;
import gpsExtractor.tools.Calculator;
import gpsExtractor.tools.trk.*;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Created by IntelliJ IDEA.
 * User: kostya
 * Date: Sep 26, 2010
 * Time: 7:14:16 PM
 * To change this template use File | Settings | File Templates.
 */
public class KMLWriter {
    private static String style = "style";
    private static List<String> styleList = new LinkedList<String>();
    static DecimalFormat decFormat = new DecimalFormat("##0.000000");
    static{
        decFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.ENGLISH));
    }

    public static void writeTracksToKML(Collection<TrackID> tids, String fileName, KMLColorOption colorOption) throws XMLStreamException, FileNotFoundException {
        final FileOutputStream str = new FileOutputStream(fileName);
        final XMLOutputFactory output = XMLOutputFactory.newInstance();
        final XMLStreamWriter writer = output.createXMLStreamWriter(str,"UTF-8");
        final DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
        dateFormatter.setTimeZone(TimeZone.getTimeZone("GMT"));

        writer.writeStartDocument("UTF-8","1.0");
        writer.writeCharacters("\n");

        writer.setDefaultNamespace("kml");

        writer.writeStartElement("kml");
        writer.writeAttribute("xmlns","http://www.opengis.net/kml/2.2");
        writer.writeCharacters("\n");

        writer.writeStartElement("Document");
        writer.writeCharacters("\n");

        writer.writeStartElement("name");
        writer.writeCharacters(tids.size() + " exported tracks");
        writer.writeEndElement();//name
        writer.writeCharacters("\n");

        writer.writeStartElement("description");
        writer.writeCharacters("There are " + tids.size() + " exported tracks, generated by GPS Extractor software.");
        writer.writeEndElement();//description
        writer.writeCharacters("\n");

        writeStyle(writer, colorOption);
        for(TrackID tid: tids){
            if(colorOption == KMLColorOption.USE_SPEED){
                Calculator.setSpeedCategories(tid);
            }else if(colorOption == KMLColorOption.USE_GRADIENTS){
                Calculator.setGradientCategories(tid);
            }
            writePlaceMark(writer, TrackStorage.getTrackByID(tid), colorOption);
        }
        
        writer.writeEndElement();//Document

        writer.writeEndElement();//kml
        writer.writeEndDocument();
        writer.flush();
        writer.close();
    }

    private static void writeStyle(XMLStreamWriter writer, KMLColorOption colorOption) throws XMLStreamException {
        int i = 0;
        int stylesCount = 1;
        if(colorOption == KMLColorOption.USE_SPEED){
            stylesCount = PreferencesHolder.getSpeedThresholds().size()+1;
        }
        if (colorOption == KMLColorOption.USE_GRADIENTS){
            stylesCount = PreferencesHolder.getGradientThresholds().size()+1;
        }
        for(Integer color : createColors(stylesCount)){
            writer.writeStartElement("Style");
            writer.writeAttribute("id",style + i);
            writer.writeCharacters("\n");

            writer.writeStartElement("LineStyle");
            writer.writeCharacters("\n");

            writer.writeStartElement("color");
            writer.writeCharacters(Integer.toHexString(color));
            writer.writeEndElement();//color
            writer.writeCharacters("\n");

            writer.writeStartElement("width");
            writer.writeCharacters("4");
            writer.writeEndElement();//width
            writer.writeCharacters("\n");

            writer.writeEndElement();//LineStyle
            writer.writeCharacters("\n");

            writer.writeStartElement("PolyStyle");
            writer.writeCharacters("\n");

            writer.writeStartElement("color");
            writer.writeCharacters(Integer.toHexString(color));
            writer.writeEndElement();//color
            writer.writeCharacters("\n");
            writer.writeEndElement();//PolyStyle
            writer.writeCharacters("\n");

            writer.writeEndElement();//Style
            writer.writeCharacters("\n");
            i++;
        }
    }

    private static void writePlaceMark(XMLStreamWriter writer, Track track, KMLColorOption colorOption) throws XMLStreamException {
        int prevStyle = -1;
        TrackPoint lastEndPoint = null;
        for(TrackSegment segment: track.getSegments()){
            for(TrackSegmentPart part: segment.getSegmentParts()){
                int currentCategory =0;
                if(colorOption == KMLColorOption.USE_SPEED){
                    currentCategory = part.getSpeedCategory();
                }
                if(colorOption == KMLColorOption.USE_GRADIENTS){
                    currentCategory = part.getGradientCategory();
                }
                if(prevStyle != currentCategory){
                    if(prevStyle != -1){//write end of placemark, but not in first time.
                        if (lastEndPoint != null)
                            {
                                StringBuilder pointsString = new StringBuilder();

                                pointsString.append(decFormat.format(lastEndPoint.getLon())).append(",");
                                pointsString.append(decFormat.format(lastEndPoint.getLat())).append(",");
                                pointsString.append(decFormat.format(lastEndPoint.getElv())).append(" ");


                                writer.writeCharacters(pointsString.toString());
                            }
                        writer.writeEndElement();//coordinates
                        writer.writeCharacters("\n");

                        writer.writeEndElement();//LineString
                        writer.writeCharacters("\n");

                        writer.writeEndElement();//Placemark
                    }
                    writer.writeStartElement("Placemark");
                    writer.writeCharacters("\n");

                    writer.writeStartElement("name");
                    writer.writeCharacters(track.getTrackName());
                    writer.writeEndElement();//name
                    writer.writeCharacters("\n");

                    writer.writeStartElement("description");
                    writer.writeCharacters("There is \"" + track.getTrackName() + "\" track, generated by GPS Extractor software.");
                    writer.writeEndElement();//description
                    writer.writeCharacters("\n");

                    writer.writeStartElement("styleUrl");
                    writer.writeCharacters("#"+style+currentCategory);
                    writer.writeEndElement();//styleUrl
                    writer.writeCharacters("\n");

                    writer.writeStartElement("LineString");

                    writer.writeStartElement("tessellate");
                    writer.writeCharacters("1");
                    writer.writeEndElement();//tessellate
                    writer.writeCharacters("\n");



                    writer.writeStartElement("coordinates");
                    writer.writeCharacters("\n");
                }
                StringBuilder pointsString = new StringBuilder();

                TrackPoint p = part.getStartPoint();
                pointsString.append(decFormat.format(p.getLon())).append(",");
                pointsString.append(decFormat.format(p.getLat())).append(",");
                pointsString.append(decFormat.format(p.getElv())).append(" ");


                writer.writeCharacters(pointsString.toString());

                prevStyle = currentCategory;
                lastEndPoint = part.getEndPoint();
            }
            if (lastEndPoint != null)
            {
                StringBuilder pointsString = new StringBuilder();

                pointsString.append(decFormat.format(lastEndPoint.getLon())).append(",");
                pointsString.append(decFormat.format(lastEndPoint.getLat())).append(",");
                pointsString.append(decFormat.format(lastEndPoint.getElv())).append(" ");


                writer.writeCharacters(pointsString.toString());
            }
            writer.writeEndElement();//coordinates
            writer.writeCharacters("\n");

            writer.writeEndElement();//LineString
            writer.writeCharacters("\n");

            writer.writeEndElement();//Placemark
        }
    }

    static List<Integer> createColors(int intervalsCount){
        List<Integer> colorList = new LinkedList<Integer>();
        for (int i = 0; i < intervalsCount; i++){
            int bufferColor;
            if(i < ((double)intervalsCount)/2.0){
                bufferColor = (int)((255.0/((double)intervalsCount))*i*2.0);
                if(bufferColor < 0){
                    bufferColor = 0;
                }else if(bufferColor > 255){
                    bufferColor = 255;
                }
                colorList.add(new Integer(0xff0000ff+0x00000100*bufferColor));
            }else {
                bufferColor = (int)((255.0/((double)intervalsCount))*(i-(int)(((double)intervalsCount)/2.0))*2.0);
                if(bufferColor < 0){
                    bufferColor = 0;
                }else if(bufferColor > 255){
                    bufferColor = 255;
                }
                colorList.add(new Integer(0xff00ff00+0x00000001*(255-bufferColor)));
            }
        }
        return colorList;
    }
}